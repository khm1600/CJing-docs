用 System；

命名空间 泛型矩阵
{
    接口 加法提供接口《型》
    {
        型 加（型 左，型 右）；
    }

    接口 乘法提供接口《型》
    {
        型 乘（型 左，型 右）；
    }

    结构 整算数提供 ：
        加法提供接口《整》，
        乘法提供接口《整》
    {
        公 整 加（整 左，整 右）=> 左 + 右；
        公 整 乘（整 左，整 右）=> 左 * 右；
    }

    类 矩阵《型，加法提供型，乘法提供型》
        其中 加法提供型：结构，加法提供接口《型》
        其中 乘法提供型：结构，乘法提供接口《型》
    {
        公 矩阵（整 行数，整 列数）
        {
            各元素 = 新 型【行数，列数】；
        }

        公 矩阵（型【，】 元素）
        {
            各元素 = 新 型【元素·GetLength(0)，元素·GetLength(1)】；
            对于（整 甲 = 0；甲 < 行数；甲++）
            {
                对于（整 乙 = 0；乙 < 列数；乙++）
                {
                    此【甲，乙】= 元素【甲，乙】；
                }
            }
        }

        公 矩阵（型【】【】 元素）
        {
            各元素 = 新 型【元素·Length，元素【0】·Length】；
            对于（整 甲 = 0；甲 < 行数；甲++）
            {
                对于（整 乙 = 0；乙 < 列数；乙++）
                {
                    此【甲，乙】= 元素【甲】【乙】；
                }
            }
        }

        私 型【，】 各元素；

        公 整 行数
        {
            取 => 各元素·GetLength(0)；
        }

        公 整 列数
        {
            取 => 各元素·GetLength(1)；
        }

        公 型 此【整 行，整 列】
        {
            取 => 各元素【行，列】；
            设 => 各元素【行，列】= value；
        }

        公 静 矩阵《型，加法提供型，乘法提供型》 算符+（
            矩阵《型，加法提供型，乘法提供型》 左，
            矩阵《型，加法提供型，乘法提供型》 右）
        {
            若（左·行数 ！= 右·行数 || 左·列数 ！= 右·列数）
            {
                丢 新 ArgumentException（“矩阵维度必须一致”）；
            }

            变 加法提供 = 默认（加法提供型）；

            变 结果 = 新 矩阵《型，加法提供型，乘法提供型》（左·行数，左·列数）；

            对于（整 甲 = 0；甲 < 结果·行数；甲++）
            {
                对于（整 乙 = 0；乙 < 结果·列数；乙++）
                {
                    结果【甲，乙】= 加法提供·加（左【甲，乙】，右【甲，乙】）；
                }
            }

            返回 结果；
        }

        公 静 矩阵《型，加法提供型，乘法提供型》 算符*（
            矩阵《型，加法提供型，乘法提供型》 左，
            矩阵《型，加法提供型，乘法提供型》 右）
        {
            若（左·列数 ！= 右·行数）
            {
                丢 新 ArgumentException（“矩阵维度必须一致”）；
            }

            变 加法提供 = 默认（加法提供型）；
            变 乘法提供 = 默认（乘法提供型）；

            变 结果 = 新 矩阵《型，加法提供型，乘法提供型》（左·行数，右·列数）；

            对于（整 甲 = 0；甲 < 结果·行数；甲++）
            {
                对于（整 乙 = 0；乙 < 结果·列数；乙++）
                {
                    变 当前 = 默认（型）；
                    对于（整 丙 = 0；丙 < 左·列数；丙++）
                    {
                        当前 = 加法提供·加（当前，乘法提供·乘（左【甲，丙】，右【丙，乙】））；
                    }
                    结果【甲，乙】= 当前；
                }
            }

            返回 结果；
        }

        公 静 矩阵《型，加法提供型，乘法提供型》 算符*（
            型 左，
            矩阵《型，加法提供型，乘法提供型》 右）
        {
            变 乘法提供 = 默认（乘法提供型）；

            变 结果 = 新 矩阵《型，加法提供型，乘法提供型》（右·行数，右·列数）；

            对于（整 甲 = 0；甲 < 结果·行数；甲++）
            {
                对于（整 乙 = 0；乙 < 结果·列数；乙++）
                {
                    结果【甲，乙】= 乘法提供·乘（左，右【甲，乙】）；
                }
            }

            返回 结果；
        }

        公 静 矩阵《型，加法提供型，乘法提供型》 算符*（
            矩阵《型，加法提供型，乘法提供型》 左，
            型 右）
        {
            变 乘法提供 = 默认（乘法提供型）；

            变 结果 = 新 矩阵《型，加法提供型，乘法提供型》（左·行数，左·列数）；

            对于（整 甲 = 0；甲 < 结果·行数；甲++）
            {
                对于（整 乙 = 0；乙 < 结果·列数；乙++）
                {
                    结果【甲，乙】= 乘法提供·乘（左【甲，乙】，右）；
                }
            }

            返回 结果；
        }
    }
}